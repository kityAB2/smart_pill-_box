// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "05/11/2023 14:48:51"
                                                                                
// Verilog Test Bench template for design : smart_pill_box
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module smart_pill_box_vlg_tst();
// constants                                           
// test vector input registers
reg [4:1] c;
reg clk;
reg rst_n;
// wires                                               
wire beep;
wire [7:0]  g_col;
wire [7:0]  lcd_data;
wire lcd_en;
wire lcd_rs;
wire lcd_rw;
wire [4:1]  r;
wire [7:0]  r_col;
wire [7:0]  row;
reg [4:0] key;
// assign statements (if any)                          
smart_pill_box i1 (
// port map - connection between master ports and signals/registers   
	.beep(beep),
	.c(c),
	.clk(clk),
	.g_col(g_col),
	.lcd_data(lcd_data),
	.lcd_en(lcd_en),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.r(r),
	.r_col(r_col),
	.row(row),
	.rst_n(rst_n)
);
//给输入信号初始值
initial begin
    clk            = 1'b0;
    rst_n          = 1'b0;     // 复位
    #10  rst_n  = 1'b1;     // 在第21ns的时候复位信号信号拉高
end
initial begin
	key              = 4'b1111;//初始装填  什么都没按下
	#20
	//验证设置当前时间
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b0010;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	//分
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b0010;//
	#30000000
	key              = 4'b1111;//
	#30000000
	//秒
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b0010;//
	#30000000
	key              = 4'b1111;//
	#30000000
	//确定
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
	//设置第一个药盒仿真
	key              = 4'b0011;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	//时
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	//分
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
 
	//秒
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
	
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	//闹钟开
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//
	#30000000
	
	key              = 4'b0001;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	//确定
	key              = 4'b0000;//
	#30000000
	key              = 4'b1111;//

	# 2000000000
	
	//闹钟关
	key              = 4'b0101;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	//显示ABC盒子
	key              = 4'b0110;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b0111;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	
	key              = 4'b1000;//
	#30000000
	key              = 4'b1111;//
	#30000000 
	$stop;
end
//50Mhz的时钟，周期则为1/50Mhz=20ns,所以每10ns，电平取反一次
always #10 clk = ~clk; 
//时序电路,用来给keyvalue寄存器赋值
always @ (*)
begin
	case (key)  
		5'b00000 : c = {3'b111,r[1]}; 
		5'b00001 : c = {2'b11,r[1],1'b1}; 
		5'b00010 : c = {1'b1,r[1],2'b11}; 
		5'b00011 : c = {r[1],3'b111}; 
		5'b00100 : c = {3'b111,r[2]}; 
		5'b00101 : c = {2'b11,r[2],1'b1};  
		5'b00110 : c = {1'b1,r[2],2'b11}; 
		5'b00111 : c = {r[2],3'b111}; 	
		5'b01000 : c = {3'b111,r[3]};  
		5'b01001 : c = {2'b11,r[3],1'b1}; 
		5'b01010 : c = {1'b1,r[3],2'b11} ;
		5'b01011 : c = {r[3],3'b111}; 	 
		5'b01100 : c = {3'b111,r[4]};  
		5'b01101 : c = {2'b11,r[4],1'b1};
		5'b01110 : c = {1'b1,r[4],2'b11}; 
		5'b01111 : c = {r[4],3'b111}; 	 	
		default: c = 4'b1111;   
	endcase 	       
end    
	                                                                               
endmodule

